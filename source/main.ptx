<?xml version='1.0' encoding='utf-8'?>

<pretext xml:lang="en-US" xmlns:xi="http://www.w3.org/2001/XInclude">

  <docinfo>
    <macros>
      \newcommand{\R}{\mathbb R}
    </macros>
    <latax-image-preamble>
      \usepackage{tikz}
    </latax-image-preamble>
  </docinfo>

  <book xml:id="my-great-book">
    <title>A First Course in Combinatorics</title>
    <subtitle></subtitle>

    <frontmatter xml:id="frontmatter">
      <titlepage>
        <author>
          <personname>Arran Hamm</personname>
          <department>Mathematics</department>
          <institution>Winthrop University</institution>
        </author>
        <date>
          <today />
        </date>
      </titlepage>

      <colophon>

        <website>
          <name>
            <c>example.org</c>
          </name>
          <address>https://example.org</address>
        </website>

        <copyright>
          <year>2020<ndash />2023</year>
          <holder>You</holder>
          <shortlicense> 
            This work is licensed under the Creative Commons Attribution-ShareAlike 4.0 International License. To view a copy of this license, visit <url href="http://creativecommons.org/licenses/by-sa/4.0/" visual="creativecommons.org/licenses/by-sa/4.0"> CreativeCommons.org</url>
          </shortlicense>
        </copyright>
      </colophon>
    </frontmatter>

    <chapter xml:id="ch-one-introduction">
      <title>An Introduction to Counting</title>

      <section xml:id="sec-basic-questions">
        <title>The Basic Questions</title>
        <p>The three basic questions of combinatorics are:
        
        <ul>
          <li>
            <p>
              Enumerative Type: <q>How many...?</q>
            </p>
          </li>
          <li>
            <p>
              Existence Type: <q>Is/Are there...?</q>
            </p>
          </li>
          <li>
            <p>
              Extremal Type: <q>What is the largest/smallest...?</q>
            </p>
          </li>
        </ul>
        </p>
        <p>
          While these three question types are central to combinatorics, they appear throughout all of mathematics.  
          In Calculus and Analysis we encounter existence questions and extremal questions, through, for example, the Intermediate Value Theorem and the Extreme Value Theorem, respectively.  
          It's worth noting that we essentially only encounter enumerative questions in Combinatorics and so we will spend the vast majority of our time exploring these kinds of questions.  
          We will, of course, investigate some existence and extremal questions as well.
        </p>
        <p>
          To warm up, without looking ahead in the text, give the following exercises a try.
        </p>
        <exercises xml:id="exercises-chapter-one">
          <exercisegroup>
          <title>A. Motivating Questions</title>
          <introduction>
            <p>
              In a class consisting of ten students, how many ways can...
            </p>
          </introduction>
          <exercise>
          <statement>
            <p>
              the students form a single-file line?
            </p>
          </statement>
          </exercise>
          <exercise>
          <statement>
            <p>
              one study group consisting of four students be formed?
            </p>
          </statement>
          </exercise>
          <exercise>
          <statement>
            <p>
              letter grades (A-F) be assigned?
            </p>
          </statement>
          </exercise>
          <exercise>
          <statement>
            <p>
              the grade distribution look?
            </p>
          </statement>
          </exercise>
          </exercisegroup>
        </exercises>
      </section>

    </chapter>

    <chapter xml:id="ch-two-enumeration">
      <title>Basic Enumeration</title>
      <p>
        In this chapter will explore basic counting ideas.
      </p>
      <section xml:id="sec-two-one-product-rule">
        <title>The Product Rule</title>
        <p>
          Before stating the main counting idea for this section, we will start with a definition.
        </p>
        <definition xml:id="def-bit-string">
          <statement>
            <p>
              A <term>bit string</term> of length <m>n</m> is an element of <m>\{ 0,1\}^n</m>.
            </p>
          </statement>
        </definition>
        <p>
          Note that <m>\{ 0,1\}^n</m> is the usual Cartesian product of <m>\{ 0,1\}</m> with itself <m>n</m> times.  
          The elements of <m>\{ 0,1\}^n</m> are sequences consisting of <m>n</m> <m>0</m>'s and/or <m>1</m>'s.
        </p>
        <p>
          With this definition in hand, one natural question is the following.
        </p>
        <example xml:id="ex-bit-string-length-seven">
          How many bit strings of length <m>7</m> are there?
        </example>
        <p>
          In order to be able to address this question, we first need to introduce the key counting technique for the section.
        </p>
        <theorem xml:id="thm-product-rule">
          <statement>
            <p>
              Suppose that a configuration results from making a sequence of <m>k</m> choices.  
              Furthermore, suppose that for each <m>i</m>, choice <m>i</m> has <m>n_i</m> options available no matter what was selected in previous choices.  
              Then there are <m>n_1\cdot n_2\cdots n_k</m> total configurations.
            </p>
          </statement>
        </theorem>
        <p>
          Notice that if we have appropriately defined <q>configuration</q> in the context of our problem, then when we apply the Product Rule we will answer the counting question.
        </p>
        <solution>
          <title>to <xref ref="ex-bit-string-length-seven"/></title>
            <p>
              We can let <q>configuration</q> mean <q>bit string of length 7</q>.  
              The choices we need to make in ordre to have a configuration are the 7 individual entries in the bit string.  
              Once each of these entries is decided we then, and only then, possess an actual bit string of length 7; this matches the use of the term choice in the Product Rule.  
              The remaining task is to decide how many options are available for each choice.  
              Since we're constructing a bit string, we can see that the options for each entry in the bit string come from the set <m>\{ 0,1\}</m>.  
              We can visualize this in the following way.
              <tabular>
                <row>
                  <cell bottom="medium" halign="center">2 OA</cell>
                  <cell></cell>
                  <cell bottom="medium" halign="center">2 OA</cell>
                  <cell></cell>
                  <cell bottom="medium" halign="center">2 OA</cell>
                  <cell></cell>
                  <cell bottom="medium" halign="center">2 OA</cell>
                  <cell></cell>
                  <cell bottom="medium" halign="center">2 OA</cell>
                  <cell></cell>
                  <cell bottom="medium" halign="center">2 OA</cell>
                  <cell></cell>
                  <cell bottom="medium" halign="center">2 OA</cell>
                </row>
                <row>
                  <cell>Choice 1</cell>
                  <cell></cell>
                  <cell>Choice 2</cell>
                  <cell></cell>
                  <cell>Choice 3</cell>
                  <cell></cell>
                  <cell>Choice 4</cell>
                  <cell></cell>
                  <cell>Choice 5</cell>
                  <cell></cell>
                  <cell>Choice 6</cell>
                  <cell></cell>
                  <cell>Choice 7</cell>
                </row>
              </tabular>
            </p>
        </solution>
        <p>
          Before proceeding to the next example, we will pause for a couple of remarks.  
          First, for the duration of this text, the words choice and option will not be used interchangeably.  
          This conscious decision by the authors is meant to prevent conceptual mix-ups in applications of the Product Rule.  
        </p>
        <p>
          Improtantly, we remark that the Product Rule uses <q>active counting</q> as its counting strategy as opposed to <q>passive counting</q>.  
          The distinction between these two types of counting is: in passive counting the objects being counted have been preconstructed (possibly by someone else); our objective is to then count these objects one-at-a-time (as if on our fingers and toes).  
          In active counting, we <q>create</q> the objects being counted by making a sequence of choices with completed objects not appearing until after the final choice is made.
          We will no proceed with another example.
        </p>
        <example xml:id="ex-bsseven-palindrome">
          <statement>
            <p>
              How many bit strings of length 7 are palindromes?
            </p>
          </statement>
          <solution>
            <title>to <xref ref="ex-bsseven-palindrome"/></title>
            <p>
              This answer will look similar to the solution to <xref ref="ex-bit-string-length-seven"/>.  
              We will let configuration mean <q>bit string of length 7 which is a palindrome</q> and will again view configurations as the result of making 7 choices. 
            </p>
          </solution>
        </example>
      </section>
    </chapter>
    <backmatter xml:id="backmatter">
      <title>Backmatter</title>

      <colophon>
        <p> This book was authored in <pretext />. </p>
      </colophon>

    </backmatter>

  </book>
</pretext>
